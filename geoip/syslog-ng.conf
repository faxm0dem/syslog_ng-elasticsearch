@version: 3.7

@include scl.conf

options {
    threaded(yes);
    use-uniqid(yes);
};

parser p_geoip {
	channel {
		parser {
			geoip(
				"${SOURCEIP}",
				prefix("geoip.")
			);
		};
		rewrite {
			set(
				"${geoip.latitude},${geoip.longitude}",
				value("geoip.location"),
				condition(not "${geoip.latitude}" == "")
			);
		};
	};
	channel {
		flags(fallback);
	};
};

block destination elasticsearch(
	template("$(format-json -k all-nv-pairs -k @timestamp=${ISODATE})")
	cluster("elasticsearch")
	port(9300)
	index("syslog")
	type("syslog")
	period("day")
	server("localhost")
	flush_limit(512)
	client_mode("transport")
)
{
	java(
		class_path("/usr/lib64/syslog-ng/java-modules/*.jar:/usr/share/elasticsearch/lib/*.jar")
		class_name("org.syslog_ng.elasticsearch.ElasticSearchDestination")
		time_zone("UTC")
		option("message_template" `template`)
		option("cluster" `cluster`)
		option("port" "`port`")
		option("index" "`index`$(if ('`period`' == 'month') '-${YEAR}.${MONTH}' '-${YEAR}.${MONTH}.${DAY}')")
		option("type" `type`)
		option("server" `server`)
		option("flush_limit" "`flush_limit`")
		option("client_mode" `client_mode`)
	)
};

source s_internal {
	internal();
};

source s_udp {
	network(
		transport(udp),
		port(514),
		ip(0.0.0.0),
		flags(syslog-protocol)
	);
};

source s_system {
	system();
};

source s_debug {
	file("/dev/stdin" flags(no-parse));
};

destination d_elasticsearch {
	elasticsearch(
		cluster("hpcmaspa"),
		flush_limit(1),
	);
};

destination d_debug {
	file("/dev/stdout" template("$(format-json -s all-nv-pairs)\n"));
};

log {
#	source(s_debug);
	source(s_internal);
	source(s_system);
	source(s_udp);
	parser(p_geoip);
#	destination(d_debug);
	destination(d_elasticsearch);
};

